// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: feed.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feed (id, name, url, user_id, updated_at,created_at,last_fetched_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name, url, user_id, created_at, updated_at, last_fetched_at
`

type CreateFeedParams struct {
	ID            uuid.UUID
	Name          string
	Url           string
	UserID        uuid.UUID
	UpdatedAt     time.Time
	CreatedAt     time.Time
	LastFetchedAt sql.NullTime
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.UserID,
		arg.UpdatedAt,
		arg.CreatedAt,
		arg.LastFetchedAt,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const getAllFeeds = `-- name: GetAllFeeds :many
SELECT id, name, url, user_id, created_at, updated_at, last_fetched_at FROM feed
`

func (q *Queries) GetAllFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedsToFetch = `-- name: GetNextFeedsToFetch :many
SELECT id, name, url, user_id, created_at, updated_at, last_fetched_at FROM feed
ORDER BY last_fetched_at ASC NULLS FIRST
LIMIT ($1)
`

func (q *Queries) GetNextFeedsToFetch(ctx context.Context, limit int32) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getNextFeedsToFetch, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markFetched = `-- name: MarkFetched :exec
UPDATE feed
SET updated_at=($1), last_fetched_at=($2)
WHERE id=($3)
`

type MarkFetchedParams struct {
	UpdatedAt     time.Time
	LastFetchedAt sql.NullTime
	ID            uuid.UUID
}

func (q *Queries) MarkFetched(ctx context.Context, arg MarkFetchedParams) error {
	_, err := q.db.ExecContext(ctx, markFetched, arg.UpdatedAt, arg.LastFetchedAt, arg.ID)
	return err
}
